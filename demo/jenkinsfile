def tag = "latest"

//Harbor私服地址
def harbor_url = "192.168.2.201:85"

//Harbor的项目名称
def harbor_project_name = "java1412"

node {
    stage('拉取代码') {
        checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: '1f6ebce4-ec3d-4ff1-a91d-36329b9d7be7', url: 'git@192.168.2.194:cherry_group/cloud-2021.git']])
    }

    stage('编译，构建镜像') {
        //定义镜像名称
        def imageName = "${project_name}:${tag}"
        //编译，安装公共工程
        sh "mvn -f service-common clean install"
        //编译，构建本地镜像
        sh "mvn -f ${project_name} clean package dockerfile:build"
        //给镜像打标签
        sh "docker tag ${imageName} ${harbor_url}/${harbor_project_name}/${imageName}"
        //登录Harbor，并上传镜像
        withCredentials([usernamePassword(credentialsId: '2b2a0461-19fc-499c-b193-fb3a24f9b55b', passwordVariable: 'password', usernameVariable: 'username')]) {
         //登录
         sh "docker login -u ${username} -p ${password} ${harbor_url}"
         //上传镜像
         sh "docker push ${harbor_url}/${harbor_project_name}/${imageName}"
        }

        }
        //删除本地镜像
        sh "docker rmi -f ${imageName}"
        sh "docker rmi -f ${harbor_url}/${harbor_project_name}/${imageName}"
    }





====================================================================

def tag = "latest"
def git_auth= "1f6ebce4-ec3d-4ff1-a91d-36329b9d7be7"
def harbor_url = "192.168.2.201:85"
def harbor_project_name = "java1412"
def harbor_auth= "2b2a0461-19fc-499c-b193-fb3a24f9b55b"

node {

    def selectedProjects = "${project_name}".split(',')   //把选择的项目信息转为数组
    stage('拉取代码') {
        checkout scmGit(branches: [[name: "*/${branch}"]], extensions: [], userRemoteConfigs: [[credentialsId:"${git_auth}", url: 'git@192.168.2.194:cherry_group/cloud-2021.git']])
    }

   stage('编译，构建镜像，部署服务') {
           sh "mvn clean install"
           sh "mvn -f service-common clean install"
           for (int i=0;i<selectedProjects.size();i++){
               def currentProject = selectedProjects[i];
               def currentProjectName = currentProject.split('@')[0].replace('"', '')
               def currentProjectPort = currentProject.split('@')[1].replace('"', '')
               def imageName = "${currentProjectName}:${tag}"
               sh "mvn -f ${currentProjectName} clean package dockerfile:build"
               sh "docker tag ${imageName} ${harbor_url}/${harbor_project_name}/${imageName}"
               withCredentials([usernamePassword(credentialsId: "${harbor_auth}", passwordVariable: 'password', usernameVariable: 'username')]) {
                   sh "docker login -u ${username} -p ${password} ${harbor_url}"
                   sh "docker push ${harbor_url}/${harbor_project_name}/${imageName}"
               }
               sh "docker rmi -f ${imageName}"
               sh "docker rmi -f ${harbor_url}/${harbor_project_name}/${imageName}"
           //  sshPublisher(publishers: [sshPublisherDesc(configName:'master_server', transfers: [sshTransfer(cleanRemote: false, excludes: '',execCommand: "/opt/jenkins_shell/deployCluster.sh $harbor_url$harbor_project_name $currentProjectName $tag $currentProjectPort", execTimeout:120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false,patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false,removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false,useWorkspaceInPromotion: false, verbose: false)])
               echo "${currentProjectName}完成编译，构建镜像"
      }
   }
}



===============================集群部署==================================
def tag = "latest"
def git_auth= "1f6ebce4-ec3d-4ff1-a91d-36329b9d7be7"
def harbor_url = "192.168.2.201:85"
def harbor_project_name = "java1412"
def harbor_auth= "2b2a0461-19fc-499c-b193-fb3a24f9b55b"
def selectedServers = "${publish_server}".split(',')    //把选择的服务区信息转为数组
def selectedProjects = "${project_name}".split(',')   //把选择的项目信息转为数组

node {
    stage('拉取代码') {
        checkout scmGit(branches: [[name: "*/${branch}"]], extensions: [], userRemoteConfigs: [[credentialsId:"${git_auth}", url: 'git@192.168.2.194:cherry_group/cloud-2021.git']])
    }

    stage('编译，构建镜像，部署服务') {
           sh "mvn clean install"
           sh "mvn -f service-common clean install"
           for (int i=0;i<selectedProjects.size();i++){
               def currentProject = selectedProjects[i];
               def currentProjectName = currentProject.split('@')[0].replace('"', '')
               def currentProjectPort = currentProject.split('@')[1].replace('"', '')
               def imageName = "${currentProjectName}:${tag}"
               sh "mvn -f ${currentProjectName} clean package dockerfile:build"
               sh "docker tag ${imageName} ${harbor_url}/${harbor_project_name}/${imageName}"
               withCredentials([usernamePassword(credentialsId: "${harbor_auth}", passwordVariable: 'password', usernameVariable: 'username')]) {
                   sh "docker login -u ${username} -p ${password} ${harbor_url}"
                   sh "docker push ${harbor_url}/${harbor_project_name}/${imageName}"
               }
               sh "docker rmi -f ${imageName}"
               sh "docker rmi -f ${harbor_url}/${harbor_project_name}/${imageName}"
               echo "${currentProjectName}完成编译，构建镜像"
   //======================以下为远程调用进行项目部署========================
     for(int j=0;j<selectedServers.size();j++){
                  def currentServer = selectedServers[j]
                  def activeProfile = "--spring.profiles.active="
                       if(currentServer=='dev-1'){
                        activeProfile = activeProfile+"server1"
                        }else if(currentServer=='dev-2'){
                        activeProfile = activeProfile+"server2"
                  }
   		         sshPublisher(publishers: [sshPublisherDesc(configName:"${currentServer}", transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: "/opt/jenkins_shell/deployCluster.sh $harbor_url $harbor_project_name $currentProjectName $tag $currentProjectPort $activeProfile", execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: "/opt/jenkins_shell/deployCluster.sh $harbor_url $harbor_project_name $currentProjectName $tag $currentProjectPort $activeProfile")], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])

            }
             echo "${currentProjectName}部署完成"
       }
   }
}

=================================================================================









